/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FundMe, FundMeInterface } from "../FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_addressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_funders",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011783803806200117883398181016040528101906200003791906200012a565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b61100c806200016c6000396000f3fe60806040526004361061007b5760003560e01c806354861af71161004e57806354861af71461011d578063b60d42881461015a578063be2693f014610164578063e39782401461016e5761007b565b80630d8e6e2c146100805780630ec3b027146100ab5780631bf6132d146100d65780633ccfd60b14610113575b600080fd5b34801561008c57600080fd5b50610095610199565b6040516100a2919061097f565b60405180910390f35b3480156100b757600080fd5b506100c0610240565b6040516100cd9190610a19565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f89190610a77565b610266565b60405161010a919061097f565b60405180910390f35b61011b61027e565b005b34801561012957600080fd5b50610144600480360381019061013f9190610ad0565b61042d565b6040516101519190610b0c565b60405180910390f35b61016261046c565b005b61016c6105a3565b005b34801561017a57600080fd5b506101836107b6565b6040516101909190610b0c565b60405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561020357600080fd5b505afa158015610217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023b9190610b3c565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102d857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561031e573d6000803e3d6000fd5b5060005b6001805490508110156103ca5760006001828154811061034557610344610b69565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103c290610bc7565b915050610322565b50600067ffffffffffffffff8111156103e6576103e5610c10565b5b6040519080825280602002602001820160405280156104145781602001602082028036833780820191505090505b506001908051906020019061042a9291906108bf565b50565b6001818154811061043d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006802b5e3af16b18800009050806104a734600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107dc565b10156104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610c9c565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105369190610cbc565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105fd57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610643573d6000803e3d6000fd5b50600060018054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161067e575b5050505050905060005b81518110156107525760008282815181106106f0576106ef610b69565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074a90610bc7565b9150506106d2565b50600067ffffffffffffffff81111561076e5761076d610c10565b5b60405190808252806020026020018201604052801561079c5781602001602082028036833780820191505090505b50600190805190602001906107b29291906108bf565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806107e883610818565b90506000670de0b6b3a764000085836108019190610d12565b61080b9190610d9b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190610e44565b505050915050600a80826108ad9190610ebf565b6108b79190610ebf565b915050919050565b828054828255906000526020600020908101928215610938579160200282015b828111156109375782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906108df565b5b5090506109459190610949565b5090565b5b8082111561096257600081600090555060010161094a565b5090565b6000819050919050565b61097981610966565b82525050565b60006020820190506109946000830184610970565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109df6109da6109d58461099a565b6109ba565b61099a565b9050919050565b60006109f1826109c4565b9050919050565b6000610a03826109e6565b9050919050565b610a13816109f8565b82525050565b6000602082019050610a2e6000830184610a0a565b92915050565b600080fd5b6000610a448261099a565b9050919050565b610a5481610a39565b8114610a5f57600080fd5b50565b600081359050610a7181610a4b565b92915050565b600060208284031215610a8d57610a8c610a34565b5b6000610a9b84828501610a62565b91505092915050565b610aad81610966565b8114610ab857600080fd5b50565b600081359050610aca81610aa4565b92915050565b600060208284031215610ae657610ae5610a34565b5b6000610af484828501610abb565b91505092915050565b610b0681610a39565b82525050565b6000602082019050610b216000830184610afd565b92915050565b600081519050610b3681610aa4565b92915050565b600060208284031215610b5257610b51610a34565b5b6000610b6084828501610b27565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bd282610966565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c0557610c04610b98565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c86601b83610c3f565b9150610c9182610c50565b602082019050919050565b60006020820190508181036000830152610cb581610c79565b9050919050565b6000610cc782610966565b9150610cd283610966565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0757610d06610b98565b5b828201905092915050565b6000610d1d82610966565b9150610d2883610966565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d6157610d60610b98565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610da682610966565b9150610db183610966565b925082610dc157610dc0610d6c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610deb81610dcc565b8114610df657600080fd5b50565b600081519050610e0881610de2565b92915050565b6000819050919050565b610e2181610e0e565b8114610e2c57600080fd5b50565b600081519050610e3e81610e18565b92915050565b600080600080600060a08688031215610e6057610e5f610a34565b5b6000610e6e88828901610df9565b9550506020610e7f88828901610e2f565b9450506040610e9088828901610b27565b9350506060610ea188828901610b27565b9250506080610eb288828901610df9565b9150509295509295909350565b6000610eca82610e0e565b9150610ed583610e0e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f1457610f13610b98565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f5157610f50610b98565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f8e57610f8d610b98565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610fcb57610fca610b98565b5b82820290509291505056fea2646970667358221220f74da12829d89979bc771519e350a92691f87c2d396d5f9a0c528824b4accd1a64736f6c63430008090033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FundMe";
  }

  deploy(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeed, overrides || {}) as Promise<FundMe>;
  }
  getDeployTransaction(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeed, overrides || {});
  }
  attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }
  static readonly contractName: "FundMe";
  public readonly contractName: "FundMe";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
