/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FundMe, FundMeInterface } from "../FundMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FundMe__NotOwner",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "cheaperWithdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_funder",
        type: "address",
      },
    ],
    name: "getAddressToAmountFunded",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getFunder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPriceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mINIMUM_USD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012323803806200123283398181016040528101906200003791906200012a565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b6110c6806200016c6000396000f3fe60806040526004361061008a5760003560e01c80639e87a5cd116100595780639e87a5cd14610140578063b60d42881461016b578063b69df05914610175578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b578063893d20e81461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a83565b6102fd565b6040516100d79190610ac9565b60405180910390f35b3480156100ec57600080fd5b506100f5610345565b6040516101029190610ac9565b60405180910390f35b6101136103d1565b005b34801561012157600080fd5b5061012a6105ad565b6040516101379190610af3565b60405180910390f35b34801561014c57600080fd5b506101556105d7565b6040516101629190610b6d565b60405180910390f35b6101736101e7565b005b34801561018157600080fd5b5061018a610601565b6040516101979190610ac9565b60405180910390f35b6101a861060e565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610bb4565b61084e565b6040516101de9190610af3565b60405180910390f35b6802b5e3af16b1880000610202346101fd6105d7565b610896565b1015610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a90610c3e565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102919190610c8d565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061034f6105d7565b73ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561039457600080fd5b505afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc9190610cf8565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610458576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561049e573d6000803e3d6000fd5b5060005b60018054905081101561054a576000600182815481106104c5576104c4610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054290610d54565b9150506104a2565b50600067ffffffffffffffff81111561056657610565610d9d565b5b6040519080825280602002602001820160405280156105945781602001602082028036833780820191505090505b50600190805190602001906105aa929190610979565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610695576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106db573d6000803e3d6000fd5b506000600180548060200260200160405190810160405280929190818152602001828054801561076057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610716575b5050505050905060005b81518110156107ea57600082828151811061078857610787610d25565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107e290610d54565b91505061076a565b50600067ffffffffffffffff81111561080657610805610d9d565b5b6040519080825280602002602001820160405280156108345781602001602082028036833780820191505090505b506001908051906020019061084a929190610979565b5050565b60006001828154811061086457610863610d25565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108a2836108d2565b90506000670de0b6b3a764000085836108bb9190610dcc565b6108c59190610e55565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109539190610efe565b505050915050600a80826109679190610f79565b6109719190610f79565b915050919050565b8280548282559060005260206000209081019282156109f2579160200282015b828111156109f15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610999565b5b5090506109ff9190610a03565b5090565b5b80821115610a1c576000816000905550600101610a04565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5082610a25565b9050919050565b610a6081610a45565b8114610a6b57600080fd5b50565b600081359050610a7d81610a57565b92915050565b600060208284031215610a9957610a98610a20565b5b6000610aa784828501610a6e565b91505092915050565b6000819050919050565b610ac381610ab0565b82525050565b6000602082019050610ade6000830184610aba565b92915050565b610aed81610a45565b82525050565b6000602082019050610b086000830184610ae4565b92915050565b6000819050919050565b6000610b33610b2e610b2984610a25565b610b0e565b610a25565b9050919050565b6000610b4582610b18565b9050919050565b6000610b5782610b3a565b9050919050565b610b6781610b4c565b82525050565b6000602082019050610b826000830184610b5e565b92915050565b610b9181610ab0565b8114610b9c57600080fd5b50565b600081359050610bae81610b88565b92915050565b600060208284031215610bca57610bc9610a20565b5b6000610bd884828501610b9f565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c28601b83610be1565b9150610c3382610bf2565b602082019050919050565b60006020820190508181036000830152610c5781610c1b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9882610ab0565b9150610ca383610ab0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cd857610cd7610c5e565b5b828201905092915050565b600081519050610cf281610b88565b92915050565b600060208284031215610d0e57610d0d610a20565b5b6000610d1c84828501610ce3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d5f82610ab0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9257610d91610c5e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610dd782610ab0565b9150610de283610ab0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1b57610e1a610c5e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e6082610ab0565b9150610e6b83610ab0565b925082610e7b57610e7a610e26565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ea581610e86565b8114610eb057600080fd5b50565b600081519050610ec281610e9c565b92915050565b6000819050919050565b610edb81610ec8565b8114610ee657600080fd5b50565b600081519050610ef881610ed2565b92915050565b600080600080600060a08688031215610f1a57610f19610a20565b5b6000610f2888828901610eb3565b9550506020610f3988828901610ee9565b9450506040610f4a88828901610ce3565b9350506060610f5b88828901610ce3565b9250506080610f6c88828901610eb3565b9150509295509295909350565b6000610f8482610ec8565b9150610f8f83610ec8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610fce57610fcd610c5e565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561100b5761100a610c5e565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561104857611047610c5e565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561108557611084610c5e565b5b82820290509291505056fea26469706673582212202696b30f6c5b432f26f1e218b7cb25dfa119c66d78723fdfa66a927390d6e0f164736f6c63430008090033";

type FundMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FundMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FundMe__factory extends ContractFactory {
  constructor(...args: FundMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FundMe";
  }

  deploy(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FundMe> {
    return super.deploy(priceFeed, overrides || {}) as Promise<FundMe>;
  }
  getDeployTransaction(
    priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(priceFeed, overrides || {});
  }
  attach(address: string): FundMe {
    return super.attach(address) as FundMe;
  }
  connect(signer: Signer): FundMe__factory {
    return super.connect(signer) as FundMe__factory;
  }
  static readonly contractName: "FundMe";
  public readonly contractName: "FundMe";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FundMeInterface {
    return new utils.Interface(_abi) as FundMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FundMe {
    return new Contract(address, _abi, signerOrProvider) as FundMe;
  }
}
